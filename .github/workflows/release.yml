name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  GOPRIVATE: github.com/octasoft-ltd/*
  GONOPROXY: github.com/octasoft-ltd/*
  GONOSUMDB: github.com/octasoft-ltd/*

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: v2-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          v2-${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Get version from tag
      id: version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "VERSION_NO_V=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build release binaries
      run: |
        mkdir -p dist
        
        # Build for multiple platforms with version in filename
        VERSION="${{ steps.version.outputs.VERSION_NO_V }}"
        
        # Linux
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/gmail-exporter-${VERSION}-linux-amd64 ./cmd/gmail-exporter
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/gmail-exporter-${VERSION}-linux-arm64 ./cmd/gmail-exporter
        
        # macOS
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/gmail-exporter-${VERSION}-darwin-amd64 ./cmd/gmail-exporter
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/gmail-exporter-${VERSION}-darwin-arm64 ./cmd/gmail-exporter
        
        # Windows
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/gmail-exporter-${VERSION}-windows-amd64.exe ./cmd/gmail-exporter
        GOOS=windows GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/gmail-exporter-${VERSION}-windows-arm64.exe ./cmd/gmail-exporter

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Generate release notes
      id: changelog
      run: |
        # Extract changelog from last tag or create simple release notes
        if [ -f CHANGELOG.md ]; then
          # Try to extract changelog section for this version
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "See CHANGELOG.md for detailed changes." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in ${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Release binaries for Gmail Exporter ${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Supported Platforms:" >> $GITHUB_OUTPUT
          echo "- Linux (amd64, arm64)" >> $GITHUB_OUTPUT
          echo "- macOS (amd64, arm64)" >> $GITHUB_OUTPUT
          echo "- Windows (amd64, arm64)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Installation:" >> $GITHUB_OUTPUT
          echo "1. Download the appropriate binary for your platform" >> $GITHUB_OUTPUT
          echo "2. Make it executable: \`chmod +x gmail-exporter-*\`" >> $GITHUB_OUTPUT
          echo "3. Run: \`./gmail-exporter-* --help\`" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Gmail Exporter ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.RELEASE_NOTES }}
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}  # Mark as prerelease if version contains hyphen (e.g., v1.0.0-beta)
        generate_release_notes: true  # Auto-generate release notes from commits
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 